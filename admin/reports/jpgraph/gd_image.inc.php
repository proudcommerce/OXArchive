<?php
 class Image { public $left_margin=30,$right_margin=30,$top_margin=20,$bottom_margin=30; public $img=null; public $plotwidth=0,$plotheight=0; public $width=0, $height=0; public $rgb=null; public $current_color,$current_color_name; public $line_weight=1, $line_style=LINESTYLE_SOLID; public $img_format; public $ttf=null; protected $expired=true; protected $lastx=0, $lasty=0; protected $obs_list=array(); protected $font_size=12,$font_family=FF_FONT1, $font_style=FS_NORMAL; protected $font_file=''; protected $text_halign="left",$text_valign="bottom"; protected $use_anti_aliasing=false; protected $quality=null; protected $colorstack=array(),$colorstackidx=0; protected $canvascolor = 'white' ; protected $langconv = null ; protected $iInterlace=false; function Image($aWidth,$aHeight,$aFormat=DEFAULT_GFORMAT,$aSetAutoMargin=true) { $this->CreateImgCanvas($aWidth,$aHeight); if( $aSetAutoMargin ) $this->SetAutoMargin(); if( !$this->SetImgFormat($aFormat) ) { JpGraphError::RaiseL(25081,$aFormat); } $this->ttf = new TTF(); $this->langconv = new LanguageConv(); } function SetInterlace($aFlg=true) { $this->iInterlace=$aFlg; } function SetAntiAliasing($aFlg=true) { $this->use_anti_aliasing = $aFlg; if( function_exists('imageantialias') ) { imageantialias($this->img,$aFlg); } else { JpGraphError::RaiseL(25128); } } function CreateRawCanvas($aWidth=0,$aHeight=0) { if( $aWidth <= 1 || $aHeight <= 1 ) { JpGraphError::RaiseL(25082,$aWidth,$aHeight); } if( USE_TRUECOLOR ) { $this->img = @imagecreatetruecolor($aWidth, $aHeight); if( $this->img < 1 ) { JpGraphError::RaiseL(25126); } $this->SetAlphaBlending(); } else { $this->img = @imagecreate($aWidth, $aHeight); if( $this->img < 1 ) { JpGraphError::RaiseL(25126); } } if( $this->iInterlace ) { imageinterlace($this->img,1); } if( $this->rgb != null ) $this->rgb->img = $this->img ; else $this->rgb = new RGB($this->img); } function CloneCanvasH() { $oldimage = $this->img; $this->CreateRawCanvas($this->width,$this->height); imagecopy($this->img,$oldimage,0,0,0,0,$this->width,$this->height); return $oldimage; } function CreateImgCanvas($aWidth=0,$aHeight=0) { $old = array($this->img,$this->width,$this->height); $aWidth = round($aWidth); $aHeight = round($aHeight); $this->width=$aWidth; $this->height=$aHeight; if( $aWidth==0 || $aHeight==0 ) { $this->img = null; $this->rgb = null; return $old; } $this->CreateRawCanvas($aWidth,$aHeight); $this->SetColor($this->canvascolor); $this->FilledRectangle(0,0,$aWidth,$aHeight); return $old ; } function CopyCanvasH($aToHdl,$aFromHdl,$aToX,$aToY,$aFromX,$aFromY,$aWidth,$aHeight,$aw=-1,$ah=-1) { if( $aw === -1 ) { $aw = $aWidth; $ah = $aHeight; $f = 'imagecopyresized'; } else { $f = 'imagecopyresampled'; } $f($aToHdl,$aFromHdl,$aToX,$aToY,$aFromX,$aFromY, $aWidth,$aHeight,$aw,$ah); } function Copy($fromImg,$toX,$toY,$fromX,$fromY,$toWidth,$toHeight,$fromWidth=-1,$fromHeight=-1) { $this->CopyCanvasH($this->img,$fromImg,$toX,$toY,$fromX,$fromY, $toWidth,$toHeight,$fromWidth,$fromHeight); } function CopyMerge($fromImg,$toX,$toY,$fromX,$fromY,$toWidth,$toHeight,$fromWidth=-1,$fromHeight=-1,$aMix=100) { if( $aMix == 100 ) { $this->CopyCanvasH($this->img,$fromImg, $toX,$toY,$fromX,$fromY,$toWidth,$toHeight,$fromWidth,$fromHeight); } else { if( ($fromWidth != -1 && ($fromWidth != $toWidth)) || ($fromHeight != -1 && ($fromHeight != $fromHeight)) ) { if( $toWidth <= 1 || $toHeight <= 1 ) { JpGraphError::RaiseL(25083); } if( USE_TRUECOLOR ) { $tmpimg = @imagecreatetruecolor($toWidth, $toHeight); } else { $tmpimg = @imagecreate($toWidth, $toHeight); } if( $tmpimg < 1 ) { JpGraphError::RaiseL(25084); } $this->CopyCanvasH($tmpimg,$fromImg,0,0,0,0, $toWidth,$toHeight,$fromWidth,$fromHeight); $fromImg = $tmpimg; } imagecopymerge($this->img,$fromImg,$toX,$toY,$fromX,$fromY,$toWidth,$toHeight,$aMix); } } static function GetWidth($aImg=null) { if( $aImg === null ) $aImg = $this->img; return imagesx($aImg); } static function GetHeight($aImg=null) { if( $aImg === null ) $aImg = $this->img; return imagesy($aImg); } static function CreateFromString($aStr) { $img = imagecreatefromstring($aStr); if( $img === false ) { JpGraphError::RaiseL(25085); } return $img; } function SetCanvasH($aHdl) { $this->img = $aHdl; $this->rgb->img = $aHdl; } function SetCanvasColor($aColor) { $this->canvascolor = $aColor ; } function SetAlphaBlending($aFlg=true) { ImageAlphaBlending($this->img,$aFlg); } function SetAutoMargin() { GLOBAL $gJpgBrandTiming; $min_bm=5; $lm = min(40,$this->width/7); $rm = min(20,$this->width/10); $tm = max(5,$this->height/7); $bm = max($min_bm,$this->height/7); $this->SetMargin($lm,$rm,$tm,$bm); } function SetFont($family,$style=FS_NORMAL,$size=10) { $this->font_family=$family; $this->font_style=$style; $this->font_size=$size; $this->font_file=''; if( ($this->font_family==FF_FONT1 || $this->font_family==FF_FONT2) && $this->font_style==FS_BOLD ){ ++$this->font_family; } if( $this->font_family > FF_FONT2+1 ) { if( !function_exists('imagettfbbox') ) { JpGraphError::RaiseL(25087); } $this->font_file = $this->ttf->File($this->font_family,$this->font_style); } } function GetTextHeight($txt="",$angle=0) { $tmp = split("\n",$txt); $n = count($tmp); $m=0; for($i=0; $i< $n; ++$i) $m = max($m,strlen($tmp[$i])); if( $this->font_family <= FF_FONT2+1 ) { if( $angle==0 ) { $h = imagefontheight($this->font_family); if( $h === false ) { JpGraphError::RaiseL(25088); } return $n*$h; } else { $w = @imagefontwidth($this->font_family); if( $w === false ) { JpGraphError::RaiseL(25088); } return $m*$w; } } else { $bbox = $this->GetTTFBBox($txt,$angle); return $bbox[1]-$bbox[5]; } } function GetFontHeight($angle=0) { $txt = "XOMg"; return $this->GetTextHeight($txt,$angle); } function GetFontWidth($angle=0) { $txt = 'O'; return $this->GetTextWidth($txt,$angle); } function GetTextWidth($txt,$angle=0) { $tmp = split("\n",$txt); $n = count($tmp); if( $this->font_family <= FF_FONT2+1 ) { $m=0; for($i=0; $i < $n; ++$i) { $l=strlen($tmp[$i]); if( $l > $m ) { $m = $l; } } if( $angle==0 ) { $w = @imagefontwidth($this->font_family); if( $w === false ) { JpGraphError::RaiseL(25088); } return $m*$w; } else { $h = @imagefontheight($this->font_family); if( $h === false ) { JpGraphError::RaiseL(25089); } return $n*$h; } } else { $m=0; for( $i=0; $i < $n; ++$i ) { $bbox = $this->GetTTFBBox($tmp[$i],$angle); $mm = $bbox[2] - $bbox[0]; if( $mm > $m ) $m = $mm; } return $m; } } function StrokeBoxedText($x,$y,$txt,$dir=0,$fcolor="white",$bcolor="black", $shadowcolor=false,$paragraph_align="left", $xmarg=6,$ymarg=4,$cornerradius=0,$dropwidth=3) { if( !is_numeric($dir) ) { if( $dir=="h" ) $dir=0; elseif( $dir=="v" ) $dir=90; else JpGraphError::RaiseL(25090,$dir); } if( $this->font_family >= FF_FONT0 && $this->font_family <= FF_FONT2+1) { $width=$this->GetTextWidth($txt,$dir) ; $height=$this->GetTextHeight($txt,$dir) ; } else { $width=$this->GetBBoxWidth($txt,$dir) ; $height=$this->GetBBoxHeight($txt,$dir) ; } $height += 2*$ymarg; $width += 2*$xmarg; if( $this->text_halign=="right" ) $x -= $width; elseif( $this->text_halign=="center" ) $x -= $width/2; if( $this->text_valign=="bottom" ) $y -= $height; elseif( $this->text_valign=="center" ) $y -= $height/2; $olda = $this->SetAngle(0); if( $shadowcolor ) { $this->PushColor($shadowcolor); $this->FilledRoundedRectangle($x-$xmarg+$dropwidth,$y-$ymarg+$dropwidth, $x+$width+$dropwidth,$y+$height-$ymarg+$dropwidth, $cornerradius); $this->PopColor(); $this->PushColor($fcolor); $this->FilledRoundedRectangle($x-$xmarg,$y-$ymarg, $x+$width,$y+$height-$ymarg, $cornerradius); $this->PopColor(); $this->PushColor($bcolor); $this->RoundedRectangle($x-$xmarg,$y-$ymarg, $x+$width,$y+$height-$ymarg,$cornerradius); $this->PopColor(); } else { if( $fcolor ) { $oc=$this->current_color; $this->SetColor($fcolor); $this->FilledRoundedRectangle($x-$xmarg,$y-$ymarg,$x+$width,$y+$height-$ymarg,$cornerradius); $this->current_color=$oc; } if( $bcolor ) { $oc=$this->current_color; $this->SetColor($bcolor); $this->RoundedRectangle($x-$xmarg,$y-$ymarg,$x+$width,$y+$height-$ymarg,$cornerradius); $this->current_color=$oc; } } $h=$this->text_halign; $v=$this->text_valign; $this->SetTextAlign("left","top"); $this->StrokeText($x, $y, $txt, $dir, $paragraph_align); $bb = array($x-$xmarg,$y+$height-$ymarg,$x+$width,$y+$height-$ymarg, $x+$width,$y-$ymarg,$x-$xmarg,$y-$ymarg); $this->SetTextAlign($h,$v); $this->SetAngle($olda); return $bb; } function SetTextAlign($halign,$valign="bottom") { $this->text_halign=$halign; $this->text_valign=$valign; } function _StrokeBuiltinFont($x,$y,$txt,$dir=0,$paragraph_align="left",&$aBoundingBox,$aDebug=false) { if( is_numeric($dir) && $dir!=90 && $dir!=0) JpGraphError::RaiseL(25091); $h=$this->GetTextHeight($txt); $fh=$this->GetFontHeight(); $w=$this->GetTextWidth($txt); if( $this->text_halign=="right") $x -= $dir==0 ? $w : $h; elseif( $this->text_halign=="center" ) { $x -= $dir==0 ? $w/2-1 : $h/2; } if( $this->text_valign=="top" ) $y += $dir==0 ? $h : $w; elseif( $this->text_valign=="center" ) $y += $dir==0 ? $h/2 : $w/2; if( $dir==90 ) { imagestringup($this->img,$this->font_family,$x,$y,$txt,$this->current_color); $aBoundingBox = array(round($x),round($y),round($x),round($y-$w),round($x+$h),round($y-$w),round($x+$h),round($y)); if( $aDebug ) { $this->PushColor('green'); $this->Polygon($aBoundingBox,true); $this->PopColor(); } } else { if( ereg("\n",$txt) ) { $tmp = split("\n",$txt); for($i=0; $i < count($tmp); ++$i) { $w1 = $this->GetTextWidth($tmp[$i]); if( $paragraph_align=="left" ) { imagestring($this->img,$this->font_family,$x,$y-$h+1+$i*$fh,$tmp[$i],$this->current_color); } elseif( $paragraph_align=="right" ) { imagestring($this->img,$this->font_family,$x+($w-$w1), $y-$h+1+$i*$fh,$tmp[$i],$this->current_color); } else { imagestring($this->img,$this->font_family,$x+$w/2-$w1/2, $y-$h+1+$i*$fh,$tmp[$i],$this->current_color); } } } else { imagestring($this->img,$this->font_family,$x,$y-$h+1,$txt,$this->current_color); } if( $aDebug ) { $p1 = array(round($x),round($y),round($x),round($y-$h),round($x+$w),round($y-$h),round($x+$w),round($y)); $this->PushColor('green'); $this->Polygon($p1,true); $this->PopColor(); } $aBoundingBox=array(round($x),round($y),round($x),round($y-$h),round($x+$w),round($y-$h),round($x+$w),round($y)); } } function AddTxtCR($aTxt) { $e = explode("\n",$aTxt); $n = count($e); for($i=0; $i<$n; ++$i) { $e[$i]=str_replace("\r","",$e[$i]); } return implode("\n\r",$e); } function GetTTFBBox($aTxt,$aAngle=0) { $bbox = @ImageTTFBBox($this->font_size,$aAngle,$this->font_file,$aTxt); if( $bbox === false ) { JpGraphError::RaiseL(25092,$this->font_file); } return $bbox; } function GetBBoxTTF($aTxt,$aAngle=0) { $aTxt = $this->AddTxtCR($aTxt); if( !is_readable($this->font_file) ) { JpGraphError::RaiseL(25093,$this->font_file); } $bbox = $this->GetTTFBBox($aTxt,$aAngle); if( $aAngle==0 ) return $bbox; if( $aAngle >= 0 ) { if( $aAngle <= 90 ) { $bbox = array($bbox[6],$bbox[1],$bbox[2],$bbox[1], $bbox[2],$bbox[5],$bbox[6],$bbox[5]); } elseif( $aAngle <= 180 ) { $bbox = array($bbox[4],$bbox[7],$bbox[0],$bbox[7], $bbox[0],$bbox[3],$bbox[4],$bbox[3]); } elseif( $aAngle <= 270 ) { $bbox = array($bbox[2],$bbox[5],$bbox[6],$bbox[5], $bbox[6],$bbox[1],$bbox[2],$bbox[1]); } else { $bbox = array($bbox[0],$bbox[3],$bbox[4],$bbox[3], $bbox[4],$bbox[7],$bbox[0],$bbox[7]); } } elseif( $aAngle < 0 ) { if( $aAngle <= -270 ) { $bbox = array($bbox[6],$bbox[1],$bbox[2],$bbox[1], $bbox[2],$bbox[5],$bbox[6],$bbox[5]); } elseif( $aAngle <= -180 ) { $bbox = array($bbox[0],$bbox[3],$bbox[4],$bbox[3], $bbox[4],$bbox[7],$bbox[0],$bbox[7]); } elseif( $aAngle <= -90 ) { $bbox = array($bbox[2],$bbox[5],$bbox[6],$bbox[5], $bbox[6],$bbox[1],$bbox[2],$bbox[1]); } else { $bbox = array($bbox[0],$bbox[3],$bbox[4],$bbox[3], $bbox[4],$bbox[7],$bbox[0],$bbox[7]); } } return $bbox; } function GetBBoxHeight($aTxt,$aAngle=0) { $box = $this->GetBBoxTTF($aTxt,$aAngle); return $box[1]-$box[7]+1; } function GetBBoxWidth($aTxt,$aAngle=0) { $box = $this->GetBBoxTTF($aTxt,$aAngle); return $box[2]-$box[0]+1; } function _StrokeTTF($x,$y,$txt,$dir=0,$paragraph_align="left",&$aBoundingBox,$debug=false) { $ConstLineSpacing = 0.25 ; if( $debug ) { $ox=$x; $oy=$y; } if( !ereg("\n",$txt) || ($dir>0 && ereg("\n",$txt)) ) { $txt = $this->AddTxtCR($txt); $bbox=$this->GetBBoxTTF($txt,$dir); $x -= $bbox[0]; $y -= $bbox[1]; if( $this->text_halign=="right" || $this->text_halign=="topanchor" ) $x -= $bbox[2]-$bbox[0]; elseif( $this->text_halign=="center" ) $x -= ($bbox[2]-$bbox[0])/2; if( $this->text_valign=="top" ) $y += abs($bbox[5])+$bbox[1]; elseif( $this->text_valign=="center" ) $y -= ($bbox[5]-$bbox[1])/2; ImageTTFText ($this->img, $this->font_size, $dir, $x, $y, $this->current_color,$this->font_file,$txt); $box=@ImageTTFBBox($this->font_size,$dir,$this->font_file,$txt); $p1 = array(); for($i=0; $i < 4; ++$i) { $p1[] = round($box[$i*2]+$x); $p1[] = round($box[$i*2+1]+$y); } $aBoundingBox = $p1; if( $debug ) { $box=@ImageTTFBBox($this->font_size,$dir,$this->font_file,$txt); $p = array(); $p1 = array(); for($i=0; $i < 4; ++$i) { $p[] = $bbox[$i*2]+$x; $p[] = $bbox[$i*2+1]+$y; $p1[] = $box[$i*2]+$x; $p1[] = $box[$i*2+1]+$y; } $this->PushColor('green'); $this->Polygon($p1,true); $this->PopColor(); $this->PushColor('darkgreen'); $this->Polygon($p,true); $this->PopColor(); $this->PushColor('red'); $this->Line($ox-15,$oy,$ox+15,$oy); $this->Line($ox,$oy-15,$ox,$oy+15); $this->PopColor(); } } else { $fh=$this->GetFontHeight(); $linemargin=round($fh*$ConstLineSpacing); $fh += $linemargin; $w=$this->GetTextWidth($txt); $y -= $linemargin/2; $tmp = split("\n",$txt); $nl = count($tmp); $h = $nl * $fh; if( $this->text_halign=="right") $x -= $dir==0 ? $w : $h; elseif( $this->text_halign=="center" ) { $x -= $dir==0 ? $w/2 : $h/2; } if( $this->text_valign=="top" ) $y += $dir==0 ? $h : $w; elseif( $this->text_valign=="center" ) $y += $dir==0 ? $h/2 : $w/2; $standardbox = $this->GetTTFBBox('Gg',$dir); $yadj = $standardbox[1]; $xadj = $standardbox[0]; $aBoundingBox = array(); for($i=0; $i < $nl; ++$i) { $wl = $this->GetTextWidth($tmp[$i]); $bbox = $this->GetTTFBBox($tmp[$i],$dir); if( $paragraph_align=="left" ) { $xl = $x; } elseif( $paragraph_align=="right" ) { $xl = $x + ($w-$wl); } else { $xl = $x + $w/2 - $wl/2 ; } $xl -= $bbox[0]; $yl = $y - $yadj; $xl = $xl - $xadj; ImageTTFText ($this->img, $this->font_size, $dir, $xl, $yl-($h-$fh)+$fh*$i, $this->current_color,$this->font_file,$tmp[$i]); if( $debug ) { $box=@ImageTTFBBox($this->font_size,$dir,$this->font_file,$tmp[$i]); $p = array(); for($j=0; $j < 4; ++$j) { $p[] = $bbox[$j*2]+$xl; $p[] = $bbox[$j*2+1]+$yl-($h-$fh)+$fh*$i; } $this->PushColor('darkgreen'); $this->Polygon($p,true); $this->PopColor(); } } $bbox = $this->GetBBoxTTF($txt,$dir); for($j=0; $j < 4; ++$j) { $bbox[$j*2]+= round($x); $bbox[$j*2+1]+= round($y - ($h-$fh) - $yadj); } $aBoundingBox = $bbox; if( $debug ) { $this->PushColor('red'); $this->Line($ox-25,$oy,$ox+25,$oy); $this->Line($ox,$oy-25,$ox,$oy+25); $this->PopColor(); } } } function StrokeText($x,$y,$txt,$dir=0,$paragraph_align="left",$debug=false) { $x = round($x); $y = round($y); $txt = $this->langconv->Convert($txt,$this->font_family); if( !is_numeric($dir) ) JpGraphError::RaiseL(25094); if( $this->font_family >= FF_FONT0 && $this->font_family <= FF_FONT2+1) { $this->_StrokeBuiltinFont($x,$y,$txt,$dir,$paragraph_align,$boundingbox,$debug); } elseif($this->font_family >= _FIRST_FONT && $this->font_family <= _LAST_FONT) { $this->_StrokeTTF($x,$y,$txt,$dir,$paragraph_align,$boundingbox,$debug); } else JpGraphError::RaiseL(25095); return $boundingbox; } function SetMargin($lm,$rm,$tm,$bm) { $this->left_margin=$lm; $this->right_margin=$rm; $this->top_margin=$tm; $this->bottom_margin=$bm; $this->plotwidth=$this->width - $this->left_margin-$this->right_margin ; $this->plotheight=$this->height - $this->top_margin-$this->bottom_margin ; if( $this->width > 0 && $this->height > 0 ) { if( $this->plotwidth < 0 || $this->plotheight < 0 ) JpGraphError::raise("To small plot area. ($lm,$rm,$tm,$bm : $this->plotwidth x $this->plotheight). With the given image size and margins there is to little space left for the plot. Increase the plot size or reduce the margins."); } } function SetTransparent($color) { imagecolortransparent ($this->img,$this->rgb->allocate($color)); } function SetColor($color,$aAlpha=0) { $this->current_color_name = $color; $this->current_color=$this->rgb->allocate($color,$aAlpha); if( $this->current_color == -1 ) { $tc=imagecolorstotal($this->img); JpGraphError::RaiseL(25096); } return $this->current_color; } function PushColor($color) { if( $color != "" ) { $this->colorstack[$this->colorstackidx]=$this->current_color_name; $this->colorstack[$this->colorstackidx+1]=$this->current_color; $this->colorstackidx+=2; $this->SetColor($color); } else { JpGraphError::RaiseL(25097); } } function PopColor() { if($this->colorstackidx<1) JpGraphError::RaiseL(25098); $this->current_color=$this->colorstack[--$this->colorstackidx]; $this->current_color_name=$this->colorstack[--$this->colorstackidx]; } function SetLineWeight($weight) { $old = $this->line_weight; imagesetthickness($this->img,$weight); $this->line_weight = $weight; return $old; } function SetStartPoint($x,$y) { $this->lastx=round($x); $this->lasty=round($y); } function Arc($cx,$cy,$w,$h,$s,$e) { while( $s < 0) $s += 360; while( $e < 0) $e += 360; imagearc($this->img,round($cx),round($cy),round($w),round($h), $s,$e,$this->current_color); } function FilledArc($xc,$yc,$w,$h,$s,$e,$style='') { while( $s < 0 ) $s += 360; while( $e < 0 ) $e += 360; if( $style=='' ) $style=IMG_ARC_PIE; if( abs($s-$e) > 0.001 ) { imagefilledarc($this->img,round($xc),round($yc),round($w),round($h), round($s),round($e),$this->current_color,$style); } } function FilledCakeSlice($cx,$cy,$w,$h,$s,$e) { $this->CakeSlice($cx,$cy,$w,$h,$s,$e,$this->current_color_name); } function CakeSlice($xc,$yc,$w,$h,$s,$e,$fillcolor="",$arccolor="") { $s = round($s); $e = round($e); $w = round($w); $h = round($h); $xc = round($xc); $yc = round($yc); if( $s ==$e ) { $this->PushColor($fillcolor); imagefilledellipse($this->img,$xc,$yc,2*$w,2*$h,$this->current_color); $this->PopColor(); $this->PushColor($arccolor); imageellipse($this->img,$xc,$yc,2*$w,2*$h,$this->current_color); $this->Line($xc,$yc,cos($s*M_PI/180)*$w+$xc,$yc+sin($s*M_PI/180)*$h); $this->PopColor(); } else { $this->PushColor($fillcolor); $this->FilledArc($xc,$yc,2*$w,2*$h,$s,$e); $this->PopColor(); if( $arccolor != "" ) { $this->PushColor($arccolor); imagefilledarc($this->img,$xc,$yc,2*$w,2*$h,$s,$e,$this->current_color,IMG_ARC_NOFILL | IMG_ARC_EDGED ) ; $this->PopColor(); } } } function Ellipse($xc,$yc,$w,$h) { $this->Arc($xc,$yc,$w,$h,0,360); } function Circle($xc,$yc,$r) { imageellipse($this->img,round($xc),round($yc),$r*2,$r*2,$this->current_color); } function FilledCircle($xc,$yc,$r) { imagefilledellipse($this->img,round($xc),round($yc),2*$r,2*$r,$this->current_color); } function lip($f,$t,$p) { $p = round($p,1); $r = $f[0] + ($t[0]-$f[0])*$p; $g = $f[1] + ($t[1]-$f[1])*$p; $b = $f[2] + ($t[2]-$f[2])*$p; return array($r,$g,$b); } function SetLineStyle($s) { if( is_numeric($s) ) { if( $s<1 || $s>4 ) JpGraphError::RaiseL(25101,$s); } elseif( is_string($s) ) { if( $s == "solid" ) $s=1; elseif( $s == "dotted" ) $s=2; elseif( $s == "dashed" ) $s=3; elseif( $s == "longdashed" ) $s=4; else JpGraphError::RaiseL(25102,$s); } else { JpGraphError::RaiseL(25103,$s); } $old = $this->line_style; $this->line_style=$s; return $old; } function StyleLine($x1,$y1,$x2,$y2,$aStyle='') { if( $this->line_weight <= 0 ) return; if( $aStyle === '' ) { $aStyle = $this->line_style; } switch( $aStyle ) { case 1: $this->Line($x1,$y1,$x2,$y2); break; case 2: $this->DashedLine($x1,$y1,$x2,$y2,2,6); break; case 3: $this->DashedLine($x1,$y1,$x2,$y2,5,9); break; case 4: $this->DashedLine($x1,$y1,$x2,$y2,9,13); break; default: JpGraphError::RaiseL(25104,$this->line_style); break; } } function DashedLine($x1,$y1,$x2,$y2,$dash_length=1,$dash_space=4) { if( $this->line_weight <= 0 ) return; if( $this->use_anti_aliasing ) { JpGraphError::RaiseL(25129); } $x1 = round($x1); $x2 = round($x2); $y1 = round($y1); $y2 = round($y2); $style = array_fill(0,$dash_length,$this->current_color); $style = array_pad($style,$dash_space,IMG_COLOR_TRANSPARENT); imagesetstyle($this->img, $style); imageline($this->img, $x1, $y1, $x2, $y2, IMG_COLOR_STYLED); $this->lastx=$x2; $this->lasty=$y2; } function Line($x1,$y1,$x2,$y2) { if( $this->line_weight <= 0 ) return; $x1 = round($x1); $x2 = round($x2); $y1 = round($y1); $y2 = round($y2); imageline($this->img,$x1,$y1,$x2,$y2,$this->current_color); $this->lastx=$x2; $this->lasty=$y2; } function Polygon($p,$closed=FALSE,$fast=FALSE) { if( $this->line_weight <= 0 ) return; $n=count($p); $oldx = $p[0]; $oldy = $p[1]; if( $fast ) { for( $i=2; $i < $n; $i+=2 ) { imageline($this->img,$oldx,$oldy,$p[$i],$p[$i+1],$this->current_color); $oldx = $p[$i]; $oldy = $p[$i+1]; } if( $closed ) { imageline($this->img,$p[$n*2-2],$p[$n*2-1],$p[0],$p[1],$this->current_color); } } else { for( $i=2; $i < $n; $i+=2 ) { $this->StyleLine($oldx,$oldy,$p[$i],$p[$i+1]); $oldx = $p[$i]; $oldy = $p[$i+1]; } if( $closed ) $this->StyleLine($oldx,$oldy,$p[0],$p[1]); } } function FilledPolygon($pts) { $n=count($pts); if( $n == 0 ) { JpGraphError::RaiseL(25105); } for($i=0; $i < $n; ++$i) $pts[$i] = round($pts[$i]); imagefilledpolygon($this->img,$pts,count($pts)/2,$this->current_color); } function Rectangle($xl,$yu,$xr,$yl) { $this->Polygon(array($xl,$yu,$xr,$yu,$xr,$yl,$xl,$yl,$xl,$yu)); } function FilledRectangle($xl,$yu,$xr,$yl) { $this->FilledPolygon(array($xl,$yu,$xr,$yu,$xr,$yl,$xl,$yl)); } function FilledRectangle2($xl,$yu,$xr,$yl,$color1,$color2,$style=1) { if( $style===1 ) { if( $yl < $yu ) { $t = $yl; $yl=$yu; $yu=$t; } for( $y=$yu; $y <= $yl; ++$y) { $this->SetColor($color1); $this->Line($xl,$y,$xr,$y); ++$y; $this->SetColor($color2); $this->Line($xl,$y,$xr,$y); } } else { if( $xl < $xl ) { $t = $xl; $xl=$xr; $xr=$t; } for( $x=$xl; $x <= $xr; ++$x) { $this->SetColor($color1); $this->Line($x,$yu,$x,$yl); ++$x; $this->SetColor($color2); $this->Line($x,$yu,$x,$yl); } } } function ShadowRectangle($xl,$yu,$xr,$yl,$fcolor=false,$shadow_width=3,$shadow_color=array(102,102,102)) { $this->PushColor($shadow_color); $this->FilledRectangle($xr-$shadow_width,$yu+$shadow_width,$xr,$yl-$shadow_width-1); $this->FilledRectangle($xl+$shadow_width,$yl-$shadow_width,$xr,$yl); $this->PopColor(); if( $fcolor==false ) $this->Rectangle($xl,$yu,$xr-$shadow_width-1,$yl-$shadow_width-1); else { $this->PushColor($fcolor); $this->FilledRectangle($xl,$yu,$xr-$shadow_width-1,$yl-$shadow_width-1); $this->PopColor(); $this->Rectangle($xl,$yu,$xr-$shadow_width-1,$yl-$shadow_width-1); } } function FilledRoundedRectangle($xt,$yt,$xr,$yl,$r=5) { if( $r==0 ) { $this->FilledRectangle($xt,$yt,$xr,$yl); return; } $this->FilledRectangle($xt+$r,$yt+$r,$xr-$r,$yl-$r); $this->FilledRectangle($xt+$r,$yt,$xr-$r,$yt+$r-1); $this->FilledRectangle($xt+$r,$yl-$r+1,$xr-$r,$yl); $this->FilledRectangle($xt,$yt+$r+1,$xt+$r-1,$yl-$r); $this->FilledRectangle($xr-$r+1,$yt+$r,$xr,$yl-$r); $this->FilledArc($xt+$r,$yt+$r,$r*2,$r*2,180,270); $this->FilledArc($xr-$r,$yt+$r,$r*2,$r*2,270,360); $this->FilledArc($xt+$r,$yl-$r,$r*2,$r*2,90,180); $this->FilledArc($xr-$r,$yl-$r,$r*2,$r*2,0,90); } function RoundedRectangle($xt,$yt,$xr,$yl,$r=5) { if( $r==0 ) { $this->Rectangle($xt,$yt,$xr,$yl); return; } $this->Line($xt+$r,$yt,$xr-$r,$yt); $this->Line($xt+$r,$yl,$xr-$r,$yl); $this->Line($xt,$yt+$r,$xt,$yl-$r); $this->Line($xr,$yt+$r,$xr,$yl-$r); $this->Arc($xt+$r,$yt+$r,$r*2,$r*2,180,270); $this->Arc($xr-$r,$yt+$r,$r*2,$r*2,270,360); $this->Arc($xt+$r,$yl-$r,$r*2,$r*2,90,180); $this->Arc($xr-$r,$yl-$r,$r*2,$r*2,0,90); } function FilledBevel($x1,$y1,$x2,$y2,$depth=2,$color1='white@0.4',$color2='darkgray@0.4') { $this->FilledRectangle($x1,$y1,$x2,$y2); $this->Bevel($x1,$y1,$x2,$y2,$depth,$color1,$color2); } function Bevel($x1,$y1,$x2,$y2,$depth=2,$color1='white@0.4',$color2='black@0.5') { $this->PushColor($color1); for( $i=0; $i < $depth; ++$i ) { $this->Line($x1+$i,$y1+$i,$x1+$i,$y2-$i); $this->Line($x1+$i,$y1+$i,$x2-$i,$y1+$i); } $this->PopColor(); $this->PushColor($color2); for( $i=0; $i < $depth; ++$i ) { $this->Line($x1+$i,$y2-$i,$x2-$i,$y2-$i); $this->Line($x2-$i,$y1+$i,$x2-$i,$y2-$i-1); } $this->PopColor(); } function StyleLineTo($x,$y) { $this->StyleLine($this->lastx,$this->lasty,$x,$y); $this->lastx=$x; $this->lasty=$y; } function LineTo($x,$y) { $this->Line($this->lastx,$this->lasty,$x,$y); $this->lastx=$x; $this->lasty=$y; } function Point($x,$y) { imagesetpixel($this->img,round($x),round($y),$this->current_color); } function Fill($x,$y) { imagefill($this->img,round($x),round($y),$this->current_color); } function FillToBorder($x,$y,$aBordColor) { $bc = $this->rgb->allocate($aBordColor); if( $bc == -1 ) { JpGraphError::RaiseL(25106); } imagefilltoborder($this->img,round($x),round($y),$bc,$this->current_color); } function SetExpired($aFlg=true) { $this->expired = $aFlg; } function Headers() { $sapi = php_sapi_name(); if( $sapi == 'cli' ) return; $file=''; $lineno=''; if( headers_sent($file,$lineno) ) { $file=basename($file); $t = new ErrMsgText(); $msg = $t->Get(10,$file,$lineno); die($msg); } if ($this->expired) { header("Expires: Mon, 26 Jul 1997 05:00:00 GMT"); header("Last-Modified: " . gmdate("D, d M Y H:i:s") . "GMT"); header("Cache-Control: no-cache, must-revalidate"); header("Pragma: no-cache"); } header("Content-type: image/$this->img_format"); } function SetQuality($q) { $this->quality = $q; } function Stream($aFile="") { $func="image".$this->img_format; if( $this->img_format=="jpeg" && $this->quality != null ) { $res = @$func($this->img,$aFile,$this->quality); } else { if( $aFile != "" ) { $res = @$func($this->img,$aFile); if( !$res ) JpGraphError::RaiseL(25107,$aFile); } else { $res = @$func($this->img); if( !$res ) JpGraphError::RaiseL(25108); } } } function Destroy() { imagedestroy($this->img); } function SetImgFormat($aFormat,$aQuality=75) { $this->quality = $aQuality; $aFormat = strtolower($aFormat); $tst = true; $supported = imagetypes(); if( $aFormat=="auto" ) { if( $supported & IMG_PNG ) $this->img_format="png"; elseif( $supported & IMG_JPG ) $this->img_format="jpeg"; elseif( $supported & IMG_GIF ) $this->img_format="gif"; elseif( $supported & IMG_WBMP ) $this->img_format="wbmp"; elseif( $supported & IMG_XPM ) $this->img_format="xpm"; else JpGraphError::RaiseL(25109); return true; } else { if( $aFormat=="jpeg" || $aFormat=="png" || $aFormat=="gif" ) { if( $aFormat=="jpeg" && !($supported & IMG_JPG) ) $tst=false; elseif( $aFormat=="png" && !($supported & IMG_PNG) ) $tst=false; elseif( $aFormat=="gif" && !($supported & IMG_GIF) ) $tst=false; elseif( $aFormat=="wbmp" && !($supported & IMG_WBMP) ) $tst=false; elseif( $aFormat=="xpm" && !($supported & IMG_XPM) ) $tst=false; else { $this->img_format=$aFormat; return true; } } else $tst=false; if( !$tst ) JpGraphError::RaiseL(25110,$aFormat); } } } class RotImage extends Image { public $a=0; public $dx=0,$dy=0,$transx=0,$transy=0; private $m=array(); function RotImage($aWidth,$aHeight,$a=0,$aFormat=DEFAULT_GFORMAT,$aSetAutoMargin=true) { $this->Image($aWidth,$aHeight,$aFormat,$aSetAutoMargin); $this->dx=$this->left_margin+$this->plotwidth/2; $this->dy=$this->top_margin+$this->plotheight/2; $this->SetAngle($a); } function SetCenter($dx,$dy) { $old_dx = $this->dx; $old_dy = $this->dy; $this->dx=$dx; $this->dy=$dy; $this->SetAngle($this->a); return array($old_dx,$old_dy); } function SetTranslation($dx,$dy) { $old = array($this->transx,$this->transy); $this->transx = $dx; $this->transy = $dy; return $old; } function UpdateRotMatrice() { $a = $this->a; $a *= M_PI/180; $sa=sin($a); $ca=cos($a); $this->m[0][0] = $ca; $this->m[0][1] = -$sa; $this->m[0][2] = $this->dx*(1-$ca) + $sa*$this->dy ; $this->m[1][0] = $sa; $this->m[1][1] = $ca; $this->m[1][2] = $this->dy*(1-$ca) - $sa*$this->dx ; } function SetAngle($a) { $tmp = $this->a; $this->a = $a; $this->UpdateRotMatrice(); return $tmp; } function Circle($xc,$yc,$r) { list($xc,$yc) = $this->Rotate($xc,$yc); parent::Circle($xc,$yc,$r); } function FilledCircle($xc,$yc,$r) { list($xc,$yc) = $this->Rotate($xc,$yc); parent::FilledCircle($xc,$yc,$r); } function Arc($xc,$yc,$w,$h,$s,$e) { list($xc,$yc) = $this->Rotate($xc,$yc); $s += $this->a; $e += $this->a; parent::Arc($xc,$yc,$w,$h,$s,$e); } function FilledArc($xc,$yc,$w,$h,$s,$e,$style='') { list($xc,$yc) = $this->Rotate($xc,$yc); $s += $this->a; $e += $this->a; parent::FilledArc($xc,$yc,$w,$h,$s,$e); } function SetMargin($lm,$rm,$tm,$bm) { parent::SetMargin($lm,$rm,$tm,$bm); $this->dx=$this->left_margin+$this->plotwidth/2; $this->dy=$this->top_margin+$this->plotheight/2; $this->UpdateRotMatrice(); } function Rotate($x,$y) { if( $this->a == 0 || $this->a == 360 ) { return array($x + $this->transx, $y + $this->transy ); } else { $x1=round($this->m[0][0]*$x + $this->m[0][1]*$y,1) + $this->m[0][2] + $this->transx; $y1=round($this->m[1][0]*$x + $this->m[1][1]*$y,1) + $this->m[1][2] + $this->transy; return array($x1,$y1); } } function CopyMerge($fromImg,$toX,$toY,$fromX,$fromY,$toWidth,$toHeight,$fromWidth=-1,$fromHeight=-1,$aMix=100) { list($toX,$toY) = $this->Rotate($toX,$toY); parent::CopyMerge($fromImg,$toX,$toY,$fromX,$fromY,$toWidth,$toHeight,$fromWidth,$fromHeight,$aMix); } function ArrRotate($pnts) { $n = count($pnts)-1; for($i=0; $i < $n; $i+=2) { list ($x,$y) = $this->Rotate($pnts[$i],$pnts[$i+1]); $pnts[$i] = $x; $pnts[$i+1] = $y; } return $pnts; } function DashedLine($x1,$y1,$x2,$y2,$dash_length=1,$dash_space=4) { list($x1,$y1) = $this->Rotate($x1,$y1); list($x2,$y2) = $this->Rotate($x2,$y2); parent::DashedLine($x1,$y1,$x2,$y2,$dash_length,$dash_space); } function Line($x1,$y1,$x2,$y2) { list($x1,$y1) = $this->Rotate($x1,$y1); list($x2,$y2) = $this->Rotate($x2,$y2); parent::Line($x1,$y1,$x2,$y2); } function Rectangle($x1,$y1,$x2,$y2) { parent::Rectangle($x1,$y1,$x2,$y2); } function FilledRectangle($x1,$y1,$x2,$y2) { if( $y1==$y2 || $x1==$x2 ) $this->Line($x1,$y1,$x2,$y2); else $this->FilledPolygon(array($x1,$y1,$x2,$y1,$x2,$y2,$x1,$y2)); } function Polygon($pnts,$closed=FALSE,$fast=FALSE) { if( $fast ) { parent::Polygon($this->ArrRotate($pnts)); } else parent::Polygon($pnts,$closed,$fast); } function FilledPolygon($pnts) { parent::FilledPolygon($this->ArrRotate($pnts)); } function Point($x,$y) { list($xp,$yp) = $this->Rotate($x,$y); parent::Point($xp,$yp); } function StrokeText($x,$y,$txt,$dir=0,$paragraph_align="left",$debug=false) { list($xp,$yp) = $this->Rotate($x,$y); return parent::StrokeText($xp,$yp,$txt,$dir,$paragraph_align,$debug); } } class ImgStreamCache { private $cache_dir, $timeout=0; function ImgStreamCache($aCacheDir=CACHE_DIR) { $this->cache_dir = $aCacheDir; } function SetTimeout($aTimeout) { $this->timeout=$aTimeout; } function PutAndStream($aImage,$aCacheFileName,$aInline,$aStrokeFileName) { GLOBAL $gJpgBrandTiming; if( $gJpgBrandTiming ) { global $tim; $t=$tim->Pop()/1000.0; $c=$aImage->SetColor("black"); $t=sprintf(BRAND_TIME_FORMAT,round($t,3)); imagestring($aImage->img,2,5,$aImage->height-20,$t,$c); } if( _FORCE_IMGTOFILE ) { $aStrokeFileName = _FORCE_IMGDIR.GenImgName(); } if( $aStrokeFileName!="" ) { if( $aStrokeFileName == "auto" ) $aStrokeFileName = GenImgName(); if( file_exists($aStrokeFileName) ) { if( !@unlink($aStrokeFileName) ) JpGraphError::RaiseL(25111,$aStrokeFileName); } $aImage->Stream($aStrokeFileName); return; } if( $aCacheFileName != "" && USE_CACHE) { $aCacheFileName = $this->cache_dir . $aCacheFileName; if( file_exists($aCacheFileName) ) { if( !$aInline ) { $diff=time()-filemtime($aCacheFileName); if( $diff < 0 ) JpGraphError::RaiseL(25112,$aCacheFileName); if( $this->timeout>0 && ($diff <= $this->timeout*60) ) return; } if( !@unlink($aCacheFileName) ) JpGraphError::RaiseL(25113,$aStrokeFileName); $aImage->Stream($aCacheFileName); } else { $this->MakeDirs(dirname($aCacheFileName)); if( !is_writeable(dirname($aCacheFileName)) ) { JpGraphError::RaiseL(25114,$aCacheFileName); } $aImage->Stream($aCacheFileName); } $res=true; if( CACHE_FILE_GROUP != "" ) $res = @chgrp($aCacheFileName,CACHE_FILE_GROUP); if( CACHE_FILE_MOD != "" ) $res = @chmod($aCacheFileName,CACHE_FILE_MOD); if( !$res ) JpGraphError::RaiseL(25115,$aStrokeFileName); $aImage->Destroy(); if( $aInline ) { if ($fh = @fopen($aCacheFileName, "rb") ) { $this->img->Headers(); fpassthru($fh); return; } else JpGraphError::RaiseL(25116,$aFile); } } elseif( $aInline ) { $aImage->Headers(); $aImage->Stream(); return; } } function GetAndStream($aImage,$aCacheFileName) { $aCacheFileName = $this->cache_dir.$aCacheFileName; if ( USE_CACHE && file_exists($aCacheFileName) && $this->timeout>=0 ) { $diff=time()-filemtime($aCacheFileName); if( $this->timeout>0 && ($diff > $this->timeout*60) ) { return false; } else { if ($fh = @fopen($aCacheFileName, "rb")) { $aImg->Headers(); fpassthru($fh); return true; } else JpGraphError::RaiseL(25117,$aCacheFileName); } } return false; } function MakeDirs($aFile) { $dirs = array(); while ( !(file_exists($aFile)) ) { $dirs[] = $aFile; $aFile = dirname($aFile); } for ($i = sizeof($dirs)-1; $i>=0; $i--) { if(! @mkdir($dirs[$i],0777) ) JpGraphError::RaiseL(25118,$aFile); if( CACHE_FILE_GROUP != "" ) { $res=true; $res =@chgrp($dirs[$i],CACHE_FILE_GROUP); $res = @chmod($dirs[$i],0777); if( !$res ) JpGraphError::RaiseL(25119,$aFile); } } return true; } } ?>
